{
  "version": "https://jsonfeed.org/version/1",
  "title": "FenqingLan",
  "home_page_url": "https://example.com/",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "I am writing about my experiences as a naval navel-gazer.",
  "author": {
    "name": "Your Name Here",
    "url": "https://example.com/about-me/"
  },
  "items": [{
      "id": "https://example.com/lanlan/posts/firefox-awesome/",
      "url": "https://example.com/lanlan/posts/firefox-awesome/",
      "title": "Firefox | 祭出一把杀猪大刀",
      "content_html": "<p>教师节当天，Mozilla官博祭出一篇文章《<a href=\"https://blog.mozilla.org/blog/2019/09/10/firefoxs-test-pilot-program-returns-with-firefox-private-network-beta/\">Firefox's Test Pilot Program Returns with Firefox Private Network Beta</a>》，宣布它将恢复<strong>Firefox Test Pilot</strong>计划，允许用户提前尝试新功能。Firefox Test Pilot程序三年前首次推出，它很快成为许多新功能的孵化场。然而，在今年1月，该组织决定关闭它，如今重启。Test Pilot计划中的第一个新项目便是Firefox Private Network Beta。</p>\n<p>这项产品解决了Proxy一个大痛点，之前常用方案是：免费的速度慢、隐私问题、流量限制、不定期换IP;付费的流量限制、隐私问题、费用被坑；自己搭建流量限制、费用问题，用了它，大部分都可以解决了，当然也有它的问题：不能提供系统级Proxy，局限于Firefox。</p>\n<font color=\"red\">\n<p>注意：<br>\n产品是否能成熟进入稳定版未知，所以需要你我的体验反馈；<br>\n如果成为正式产品，能否免费未知，所以尽快试用【嘿嘿，另一种形式的羊毛】，也许你是资深用户，以后给你个VIP【白日做梦】。<br>\n</font></p>\n<h3 id=\"%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%81-%E5%8E%9F%E6%96%87\" tabindex=\"-1\">安装步骤详见 <a href=\"https://shimo.im/docs/8tQ9VChgqTGjHpG8\">原文</a> <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%81-%E5%8E%9F%E6%96%87\">#</a></h3>\n<h5 id=\"%E5%8E%9F%E6%96%87%E8%A2%AB%E9%98%AE%E4%B8%80%E5%B3%B0%E6%8E%A8%E8%8D%90%E8%BF%87%EF%BC%8C%E5%8F%8D%E5%93%8D%E8%BF%98%E8%A1%8C%EF%BC%8C%E9%98%85%E8%AF%BB%E9%87%8F%E6%9C%898900%2B\" tabindex=\"-1\"><a href=\"https://github.com/ruanyf/weekly/issues/848\">原文被阮一峰推荐过，反响还行，阅读量有8900+</a> <a class=\"direct-link\" href=\"#%E5%8E%9F%E6%96%87%E8%A2%AB%E9%98%AE%E4%B8%80%E5%B3%B0%E6%8E%A8%E8%8D%90%E8%BF%87%EF%BC%8C%E5%8F%8D%E5%93%8D%E8%BF%98%E8%A1%8C%EF%BC%8C%E9%98%85%E8%AF%BB%E9%87%8F%E6%9C%898900%2B\">#</a></h5>\n",
      "date_published": "2019-09-12T00:00:00Z"
    },{
      "id": "https://example.com/lanlan/posts/xushiwei-software-architecture/",
      "url": "https://example.com/lanlan/posts/xushiwei-software-architecture/",
      "title": "许式伟的架构课",
      "content_html": "<p>年初制定计划的时候，就安排上梳理系统架构思路的任务，找了很多资料，大部分只从技术角度提及了【高并发】【高可用】【可扩展】三个系统设计比较常见的的技术需求，以及罗列一些具体的技术选型，这仿佛又回到不断追求具体技术的循环之中，梳理的效果甚微，也没有搞懂架构的本质。</p>\n<p>一个多月前，关注到七牛云许式伟老师的架构课，听过其大名，如此出色公司的CEO为何发布这一档课程，应该不是为了赚钱，或许真是分享其多年的知识总结呢？抱着这个希望，购买了本套课程。整套58讲，截至今晚，更新到34课时，提供图文、音频，我觉得评论区的讨论也很精彩，会引出很多思考。</p>\n<p>简单介绍一下许式伟老师，七牛云CEO，说是CEO，也是深耕技术多年的大佬，同时兼备着敏锐的商业头脑。技术方面，Golang最早的国内布道者，本来自己团队研发出一门类似的语言，后来发现了Go，而且觉得Go要比自己的更优雅，果断弃之。七牛云起家业务应该是对象存储服务，以前从事的工作有对接过。随着数据的累计，AI的发展，衍生出直播、短视频、泛安防、CDN加速等业务。</p>\n<p>docker、k8s都是利用Go开发的著名产品，因为太有名，貌似Go被挂上一个为云而生的语言，其实在web服务、运维方面都有很多应用。我没有写过Go，代码上不好做评价，但是它部署真的是方便高效。有一个奇怪的示例，号称下一代nodejs的deno，立项初期，使用Go来开发，一段时间后，突然发现转为Rust实现，作者rd解释主要原因速度不够快，Go就这么被放弃掉。也因此，引起我对Rust的兴趣，它主要面向系统级应用，号称速度、安全为其王牌，入门一段时间，后来没跟上节奏，有时间得捡起来，貌似越扯越远了！！！</p>\n<p>推荐：Carrie Anne的计算机速成课，B站有翻译精校版，英语好的可以去油管看原版。一共40节，每节10min+，刚好对应冯诺依曼体系等基础知识，看完后绝对有成长，非常幸运，同时接触的两门课程，相互补充。</p>\n<p>架构设计最迷人也是最难攻坚的点是，根据产品不同时期以及迭代速度、沉淀和更替的变化而变化。产品从一个工程到模块化再到组件化最后插件化，如果能深刻理解项目不同阶段和不同体量的技术架构选型，而且各个流程中，不同阶段存在不同的方案，期间也要保证最大的协同开发效率，这是一件多么具有挑战、令人沸腾的事情。</p>\n<p>不以业务驱动的技术开发都是耍流氓，即使身处Google这种强工程师文化的公司(其实Google已经开始受到了一些这种文化带来的恶果，譬如GCP的占有率相比Amazon差一截，一方面是布局晚，另一方面售后服务无法满足客户，工程师不太想去提供咨询)，也要从业务出发，选择最合适的。同样产品的需求也不能脑洞太大，应该实打实来源于客户反馈。</p>\n<p>关于工程质量，从一接手就要严格把关，不要依赖后期的重构，重构有时会比从零开发还要耗费时间，为自己，为他人。</p>\n",
      "date_published": "2018-05-01T00:00:00Z"
    },{
      "id": "https://example.com/lanlan/posts/load-blance/",
      "url": "https://example.com/lanlan/posts/load-blance/",
      "title": "负载均衡小结",
      "content_html": "<p>1.负载均衡方式</p>\n<ul>\n<li>HTTP重定向负载均衡</li>\n<li>DNS域名解析负载均衡</li>\n<li>反向代理负载均衡</li>\n<li>IP负载均衡</li>\n<li>数据链路层负载均衡</li>\n</ul>\n<p>2.负载均衡算法</p>\n<ul>\n<li>轮询法</li>\n<li>随机法</li>\n<li>源地址哈希</li>\n<li>加权轮询</li>\n<li>加权随机</li>\n<li>最小连接数<br>\n。。。</li>\n</ul>\n<p>3.工具：<code>haproxy | lvs | dns轮询 | nginx | keepalive |</code></p>\n<p>服务器负载均衡是将客户端请求在集群中的服务器上实现均衡分发的技术。按照位于七层网络协议栈的不同层的划分，服务器负载均衡可以分为四层(L4)负载均衡和七层(L7)负载均衡两种。其中，L4负载均衡是基于流的服务器负载均衡，能够对报文进行逐流分发，即将同一条流的报文分发给同一台服务器；L7负载均衡是基于内容的服务器负载均衡，能够对七层报文内容进行深度解析，并根据其中的关键字进行逐包转发，按照既定策略将连接导向指定的服务器。两者相比较，L4负载均衡因无法对七层业务实现按内容分发，限制了它的适用范围，因此L7负载均衡受到了业界的极大重视并日渐成为服务器负载均衡的主流。</p>\n<p>L4负载均衡的实现主要有NAT方式和DR方式两种类型，它们适用于不同的应用场景</p>\n<p>L4服务器负载均衡在截取数据流以后，对数据包的检查和分析仅局限于IP报文头部和TCP/UDP报文头部，而并不关心TCP/UDP数据包的有效载荷信息。而L7服务器负载均衡则要求负载均衡设备除了支持基于四层的负载均衡以外，还要解析数据包中四层以上的信息，即应用层的信息，例如解析HTTP内容，从而在数据包中提取出HTTP URL或者Cookie信息，用来作为负载均衡的依据。</p>\n<p><a href=\"http://mp.weixin.qq.com/s/WzSwfrZopfDo6ff8b4kihQ\">http://mp.weixin.qq.com/s/WzSwfrZopfDo6ff8b4kihQ</a><br>\n<a href=\"http://hualong.iteye.com/blog/2101225\">http://hualong.iteye.com/blog/2101225</a></p>\n<p>Keepalived和Heartbeat对比：<br>\nKeepalived使用的vrrp协议方式，虚拟路由冗余协议 (Virtual Router Redundancy Protocol，简称VRRP)。Heartbeat是基于主机或网络的服务的高可用方式；<br>\nkeepalived的目的是模拟路由器的双机。heartbeat的目的是用户service的双机；<br>\nlvs的高可用建议用keepavlived。业务的高可用用heartbeat</p>\n<p>DNS  NFS  路由 网关等网络名词<br>\n请求的流程</p>\n<p>配置双网卡和内部外部两套IP地址<br>\nDR模式下需要LVS和RS集群绑定同一个VIP（RS通过将VIP绑定在loopback实现</p>\n<p>子域名？百兆网卡</p>\n<p>负载均衡又分为四层负载均衡和七层负载均衡。四层负载均衡工作在OSI模型的传输层，主要工作是转发，它在接收到客户端的流量以后通过修改数据包的地址信息将流量转发到应用服务器。<br>\n七层负载均衡工作在OSI模型的应用层，因为它需要解析应用层流量，所以七层负载均衡在接到客户端的流量以后，还需要一个完整的TCP/IP协议栈。七层负载均衡会与客户端建立一条完整的连接并将应用层的请求流量解析出来，再按照调度算法选择一个应用服务器，并与应用服务器建立另外一条连接将请求发送过去，因此七层负载均衡的主要工作就是代理。</p>\n<p>以常见的TCP为例，负载均衡设备在接收到第一个来自客户端的SYN 请求时，即通过上述方式选择一个最佳的服务器，并对报文中目标IP地址进行修改(改为后端服务器IP），直接转发给该服务器。TCP的连接建立，即三次握手是客户端和服务器直接建立的，负载均衡设备只是起到一个类似路由器的转发动作。在某些部署情况下，为保证服务器回包可以正确返回给负载均衡设备，在转发报文的同时可能还会对报文原来的源地址进行修改。</p>\n<p>所谓七层负载均衡，也称为“内容交换”，也就是主要通过报文中的真正有意义的应用层内容，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器。<br>\n以常见的TCP为例，负载均衡设备如果要根据真正的应用层内容再选择服务器，只能先代理最终的服务器和客户端建立连接(三次握手)后，才可能接受到客户端发送的真正应用层内容的报文，然后再根据该报文中的特定字段，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器。负载均衡设备在这种情况下，更类似于一个代理服务器。负载均衡和前端的客户端以及后端的服务器会分别建立TCP连接。所以从这个技术原理上来看，七层负载均衡明显的对负载均衡设备的要求更高，处理七层的能力也必然会低于四层模式的部署方式。那么，为什么还需要七层负载均衡呢？<br>\n第二，应用场景的需求。<br>\n七层应用负载的好处，是使得整个网络更&quot;智能化&quot;, 参考我们之前的另外一篇专门针对HTTP应用的优化的介绍，就可以基本上了解这种方式的优势所在。例如访问一个网站的用户流量，可以通过七层的方式，将对图片类的请求转发到特定的图片服务器并可以使用缓存技术；将对文字类的请求可以转发到特定的文字服务器并可以使用压缩技术。当然这只是七层应用的一个小案例，从技术原理上，这种方式可以对客户端的请求和服务器的响应进行任意意义上的修改，极大的提升了应用系统在网络层的灵活性。很多在后台，(例如Nginx或者Apache)上部署的功能可以前移到负载均衡设备上，例如客户请求中的Header重写，服务器响应中的关键字过滤或者内容插入等功能。<br>\n另外一个常常被提到功能就是安全性。网络中最常见的SYN Flood攻击，即黑客控制众多源客户端，使用虚假IP地址对同一目标发送SYN攻击，通常这种攻击会大量发送SYN报文，耗尽服务器上的相关资源，以达到Denial of Service(DoS)的目的。从技术原理上也可以看出，四层模式下这些SYN攻击都会被转发到后端的服务器上；而七层模式下这些SYN攻击自然在负载均衡设备上就截止，不会影响后台服务器的正常运营。另外负载均衡设备可以在七层层面设定多种策略，过滤特定报文，例如SQL Injection等应用层面的特定攻击手段，从应用层面进一步提高系统整体安全。<br>\n现在的7层负载均衡，主要还是着重于应用广泛的HTTP协议，所以其应用范围主要是众多的网站或者内部信息平台等基于B/S开发的系统。 4层负载均衡则对应其他TCP应用，例如基于C/S开发的ERP等系统。<br>\n第三，七层应用需要考虑的问题。<br>\n1：是否真的必要，七层应用的确可以提高流量智能化，同时必不可免的带来设备配置复杂，负载均衡压力增高以及故障排查上的复杂性等问题。在设计系统时需要考虑四层七层同时应用的混杂情况。<br>\n2：是否真的可以提高安全性。例如SYN Flood攻击，七层模式的确将这些流量从服务器屏蔽，但负载均衡设备本身要有强大的抗DDoS能力，否则即使服务器正常而作为中枢调度的负载均衡设备故障也会导致整个应用的崩溃。<br>\n3：是否有足够的灵活度。七层应用的优势是可以让整个应用的流量智能化，但是负载均衡设备需要提供完善的七层功能，满足客户根据不同情况的基于应用的调度。最简单的一个考核就是能否取代后台Nginx或者Apache等服务器上的调度功能。能够提供一个七层应用开发接口的负载均衡设备，可以让客户根据需求任意设定功能，才真正有可能提供强大的灵活性和智能性。</p>\n",
      "date_published": "2018-03-01T00:00:00Z"
    },{
      "id": "https://example.com/lanlan/posts/programmer-training/",
      "url": "https://example.com/lanlan/posts/programmer-training/",
      "title": "程序员的自我修养",
      "content_html": "<p>code review篇<br>\ncode review相对编程规范的范围更广，但是与其思想一致，需要在团队中的review规则一致，可以不断补充，完善。</p>\n<p>code review不仅可以提高代码质量，还是学习他人优秀思想的好方法。</p>\n<p>根据书中所列，大致有以下要点，当然可以根据自己所需，筛选使用：</p>\n<p>常规项<br>\n代码能够工作么？它有没有实现预期的功能，逻辑是否正确等。<br>\n所有的代码是否简单易懂？<br>\n代码符合你所遵循的编程规范么？这通常包括大括号的位置，变量名和函数名，行的长度，缩进，格式和注释。<br>\n是否存在多余的或是重复的代码？<br>\n代码是否尽可能的模块化了？<br>\n是否有可以被替换的全局变量？<br>\n是否有被注释掉的代码？<br>\n循环是否设置了长度和正确的终止条件？<br>\n是否有可以被库函数替代的代码？<br>\n是否有可以删除的日志或调试代码？<br>\n安全<br>\n所有的数据输入是否都进行了检查（检测正确的类型，长度，格式和范围）并且进行了编码？<br>\n在哪里使用了第三方工具，返回的错误是否被捕获？<br>\n输出的值是否进行了检查并且编码？<br>\n无效的参数值是否能够处理？<br>\n文档<br>\n是否有注释，并且描述了代码的意图？<br>\n所有的函数都有注释吗？<br>\n对非常规行为和边界情况处理是否有描述？<br>\n第三方库的使用和函数是否有文档？<br>\n数据结构和计量单位是否进行了解释？<br>\n是否有未完成的代码？如果是的话，是不是应该移除，或者用合适的标记进行标记比如‘TODO’？<br>\n测试<br>\n代码是否可以测试？比如，不要添加太多的或是隐藏的依赖关系，不能够初始化对象，测试框架可以使用方法等。<br>\n是否存在测试，它们是否可以被理解？比如，至少达到你满意的代码覆盖(code coverage)。<br>\n单元测试是否真正的测试了代码是否可以完成预期的功能？<br>\n是否检查了数组的“越界“错误？<br>\n是否有可以被已经存在的API所替代的测试代码？</p>\n<p>命名规范篇</p>\n<p>命名规范，包含了目录，文件以及变量的命名，命名规则没有谁对谁错，在项目中保持一致才是关键。</p>\n<p>本文主要关注命名所代表的的含义：</p>\n<p>要分析和思考当前被你命名的事物或逻辑的本质</p>\n<p>要知道何时用动词，何时用名词，以及形容词放哪里，动词放哪里，名词放哪里</p>\n<p>任何一个属性的名字都要和其实际所代表的含义一致，任何一个方法所做的事情都要和该方法的名字的含义一致</p>\n<p>对于属性或类名，应该总是名词在最后面，名词决定了这个属性代表什么，前面的部分都是用于修饰这个名词。比如，假如现在你有一个服务，然后又是一个关于订单的服务，那就可以命名为OrderService，这样命名就是告诉我们这是一个服务，然后是一个订单服务。再比如CancelOrderCommand，看到这个我们就知道这是一个Command，即命令，然后是什么命令呢？就是一个取消订单的命令，CancelOrder表示取消订单。</p>\n<p>对于方法，应该总是动词开头，名词结尾。比如Order.AddItem(orderItem);这个，表示订单类有一个添加订单项的方法，Add是动词，表示添加，Item是名词表示订单项。</p>\n",
      "date_published": "2018-02-01T00:00:00Z"
    },{
      "id": "https://example.com/lanlan/posts/react/",
      "url": "https://example.com/lanlan/posts/react/",
      "title": "React Tutorial",
      "content_html": "<ul>\n<li>\n<p>An element describes what you want to see on the screen.</p>\n</li>\n<li>\n<p>React elements are immutable.</p>\n</li>\n<li>\n<p>React only updates what’s necessary.</p>\n</li>\n<li>\n<p>2 formats: Function and Class.</p>\n</li>\n<li>\n<p>All React components must act like pure functions with respect to their props.</p>\n</li>\n<li>\n<p><a href=\"https://segmentfault.com/a/1190000011317515\">Event bind</a></p>\n</li>\n<li>\n<p>Hooks Core: They let you use state and other React features without writing a class.</p>\n</li>\n</ul>\n",
      "date_published": "2018-01-01T00:00:00Z"
    },{
      "id": "https://example.com/lanlan/posts/comeing-home/",
      "url": "https://example.com/lanlan/posts/comeing-home/",
      "title": "观 归来",
      "content_html": "<p>终于还债成功，拖了这么久。</p>\n<p>先谈《归来》，在姐姐强烈建议下，我才看的，主要也是冲着陈道明。电影的观后感不算强烈，简单地认为轻描淡写的批评了文革，叙述了两老人的坚贞感情。我并无过多感触。写这篇文留念主要是看了电影原著《陆犯焉识》，这篇严歌苓的大作被张艺谋翻拍为《归来》。中间隔了很久，十一才看完小说，看完后我真是想骂张艺谋的，冷静下来想这也许是导演的不同表现手法，可当时的编剧正是严歌苓，就算有太多的借口，她怎么可能会允许这样糟蹋她的作品，按照电影的叙述连整个故事的一半内容都没有表现出来，甚至可以说叙事的不足完全使整个故事框架倒塌，中心偏离正轨。话怎么说都是我自己的感觉，这里仅代表个人观点。</p>\n<p>有些时候，骂人足以慰藉他人。真是第一次伤心成这样，花三天看，四天缓神儿。情感过于易波动，无论如何还是允许我这一次吧。此刻我的气息还没调匀，悲情，愤怒，兴奋，同情，温馨，繁杂的感情混在一起，那滋味儿不好受。</p>\n<p>看完小说后，我问自己，故事给你最深的印象是什么，我所想的就是“严歌苓怎么就忍心让她失忆了呢”，我所纠结的那几天也是围绕此。“她”不是别人，正是小说中的女主人公冯婉喻，一个朴实，坚贞，受禁于保守思想的一个善良的中国传统女子，她周身所散发的东方女子的知性美，足以使任何男子痴迷。除了一人，小说中的男主角陆焉识。他俩的结合是中国包办婚姻的苦果。一个囿于规矩，一个思想开放，将这两人凑在一块儿，只能说月老儿真的老了。婚后，男方为逃避女方，逃避这不自由的爱情，留学海外，享尽人世铅华。而另一个，伺候老小，勤勤恳恳，绝无二心。男方主攻语言文学，归国后在上海高校任教，没多久因战争的爆发而随校内迁，即使这短暂的相聚他也没怎么善待她，可以说还是没有一点爱上她，如果不是，怎么会一点不心疼呢？战争年代又有什么是自己的呢，好好地大宅子，颇深的家产也随风而去，所有重担又都担在她的身上。</p>\n<p>解放后，因为内部矛盾，他也受到牵连，被判处死刑，是她啊，牺牲了身体让他妈那些畜生放了自己丈夫一条生路，改判无期流放西北，这一别二十几年啊。你想一想，对于一个中国女子，一个传统的中国女子，这牺牲未免太大了。她牺牲的是什么，仅仅就是一副皮囊吗？为什么，仅仅是对他的守候。在那时，他又以一种如何的姿势对待她呢？痛心疾首。</p>\n<p>也许是无穷的黑暗着实吓坏了他，他变了，想起了妻子随自己的好。那些好，由点点滴滴积聚，不断汇入他的心房，终成涛涛洪峰，冲垮了他那坚硬的外壳，他开始在无穷无尽的黑夜思念她，反思自己，在两人婚后十几年后猛然间发现“哦，我爱上她了，我爱上了冯婉喻”。浪子回头啊，千金又何妨。由于语言文学出身，凭借强大的记忆力，他开始在脑中记录自己对妻子的忏悔与爱意。真的回头了，他大哭，他越狱，只为见她一面吧。在那个年代，真不知道明天还能否活着。见面的机会就一次一次擦肩而过，只能通过信件得知家中的情况。读到这里，我的感情线就已经快扛不住了，看完它，我只是想知道究竟他以何种方式对她表达歉意，来微微冲淡这身上他对她所犯下的罪恶。结局大家都知道了，冯婉喻失忆了，就在他登上归来东行列车之前，她失忆了，什么都记不得了，她不再记得那个自己深爱了一辈子丈夫的样子，但是陆焉识的名字她深深刻在心里，潜意识里她仍然记得他这个罪恶多端的丈夫，等待他的归来。</p>\n<p>归来与否还重要吗？真正重要的是他那份姗姗的悔恨与泪水始终没能真正归来，归来给予一个意识清醒的她，来冲洗这么多年的委屈。其实最悲惨的还是他陆焉识，一辈子没能正能想妻子道个歉，表达一下对她的情义，让她了解自己对她的爱意，好吧，就让他在懊悔中残度余生吧！！！这就是我感受到严歌苓的残酷，他犯了罪，这样的罪行，牺牲了一个女人大好年华，她的大半生，我怎可能原谅你，你还带着她的骨灰归于那个让你惊醒的大西北，也许在那，你反思的的圣地或许还可以告慰她的灵魂，能感到一丝丝忏悔。</p>\n<p>怎么就让她失了忆，好狠啊你</p>\n",
      "date_published": "2014-12-01T00:00:00Z"
    },{
      "id": "https://example.com/lanlan/posts/rene-liu/",
      "url": "https://example.com/lanlan/posts/rene-liu/",
      "title": "Rene Liu",
      "content_html": "<p>今晚是什么原因来着，我突然百度了刘若英小姐，哈哈，还是叫奶茶吧。不得了的家世背景，最吸引我的还是两点，读的书不少，还有她的感情生活。我越来越欣赏能读书的人了（在我的草稿箱里还躺着两篇关于我读书的随笔，以后应该能面世），简单的说我在大学受到有益的一方面就是爱看书了，所以也尊重这种人。但估计今晚主要诉说的还是她的感情了。恭喜她这么一个70年的人终于结婚要生子了，对我来说，或者对早就熟悉奶茶的人陈升算是今晚的主角。看了看表，零点半了，不急吧应该。我可是被陈升征服了今晚，我只看了一个50分钟的采访，这会儿还听着他的歌儿呢。</p>\n<p>两人差了12岁吧，亦师亦“友”，应该说奶茶挺喜欢他的，我觉得是他的那份男人的负责的态度让他没有那么做，那时候他已经结婚了吧，没有接受这段感情，着实不易啊，那么乱的圈子，何况奶茶二十一岁啊那时，从这一点陈升绝对是个正人。他很怪，怎么个怪法儿，真得自己去看那节目。所以百科上说陈升是台北比较难搞的人之一。他很直，对待刘若英很不客气，有什么说什么，节目录的很不顺利，因为他几句话总能将她气哭。其实，还是那个态度让刘若英接受不了，十几年啊，不要你就是不要你，无论你多好。在这里我们应该尊重他们两个人，都有自己的坚持。这里我说的太浅薄了，心里的总是无法表达出来，总是要经历才能解其中味。她可以说是想粘着他，可他一定要放手，在听他唱的‘风筝’还有几首，总之那就像专门为这次节目专门写的，或者说陈升专门为做这次节目特意选的几首，全部意思就是劝她放手吧，这次过后可能就要真的说再见了。在看到刘与自己合唱后似乎放手，他很欣慰的笑了，或许高兴自己帮她解开了一个心结。就在这看似美好的落幕中结束了，她当然还没放弃，十几年那可能轻而易举的抛弃，也许命里还没出现另外一个人。。。</p>\n<p>对陈升真不是很熟悉，听过北京一夜，也只就是听过的基础上，长什么样不清楚。他很普通，也很幽默，一口正宗的台腔，可是他的话，神情很不普通。充满了成熟的味道，再看他的音乐，风格属于90年代吧，不了解他的人听起来很一般，单弱稍微深入一点，仔细看看他的词，你就会被这一切吸引，瞬间回归90年代，那个还处于纯真质朴，充满长发文艺青年，唱片似乎还是半彩色，我还是小孩儿的那个年代。在那个年代，细细品着他的经，他的波折，他的感情，他的态度，他的抉择，那时我们也许会明白。这样一个人，太有魅力了，不知不觉中感染着周围人群。我总觉得写到现在也没说出一开始想表达的，能懂多少就是那些吧。</p>\n",
      "date_published": "2014-04-01T00:00:00Z"
    }
  ]
}
